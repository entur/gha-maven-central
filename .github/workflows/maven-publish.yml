name: Release to Maven Central (Maven)
description: "Publish release artifact to Maven Central for a Maven library project. Increments the version based on the latest release tag."
on:
  workflow_call:
    inputs:
      runner:
        description: "Job Runner"
        required: false
        type: string
        default: "ubuntu-24.04"
      git_ref:
        description: "Option to override git reference to checkout before build"
        type: string
        required: false
      java_version:
        description: "Java Runtime Version"
        required: false
        type: number
        default: 21
      java_distribution:
        description: "Java distribution for Setup-Java"
        required: false
        type: string
        default: "liberica"
      # GET VERSION
      version_strategy:
        description: 'Strategy to use for version extraction. Currently supports "file" or "tag".'
        required: false
        type: string
        default: "file"
      version_file_name:
        description: "The name of the file containing the version number"
        required: false
        type: string
        default: "pom.xml"
      version_tag_prefix:
        description: "The prefix of the tag containing the previous version number to extract (used with the tag strategy)"
        required: false
        type: string
        default: "v"
      # UPDATE VERSION
      next_version:
        description: "The next (semver) version of the artifact. Increments can be noop (''), automatically detected ('auto') from the commit message, partially incremented using ('major', 'minor', 'patch'), or be forcefully defined (e.g. '1.3.0')"
        required: false
        type: string
        default: "auto" #  noop (''), auto, major, minor, patch or a semver version
      push_to_repo:
        description: 'Whether to push the new version back to the repo'
        required: false
        type: boolean
        default: true
      # JRELEASE
      snapshot:
        description: "Whether the artifact is a snapshot or not"
        required: false
        type: boolean
        default: false
    secrets:
      SONATYPE_AUTH_USER:
        required: true
      SONATYPE_AUTH_TOKEN:
        required: true
      SONATYPE_GPG_KEY_PUBLIC:
        required: true
      SONATYPE_GPG_KEY:
        required: true
      SONATYPE_GPG_KEY_PASSWORD:
        required: true

    outputs:
      version:
        description: Published version
        value: ${{ jobs.publish.outputs.version }}

jobs:
  publish:
    runs-on: ${{ inputs.runner }}
    permissions:
      contents: write
      issues: write
      packages: write
    env:
      JRELEASER_MAVENCENTRAL_URL: "https://central.sonatype.com/api/v1/publisher"
      JRELEASER_DEPLOY_MAVEN_MAVENCENTRAL_ACTIVE: "RELEASE"
      JRELEASER_DEPLOY_MAVEN_NEXUS2_ACTIVE: "SNAPSHOT"
      JRELEASER_NEXUS2_URL: "https://ossrh-staging-api.central.sonatype.com/service/local"
      JRELEASER_NEXUS2_SNAPSHOT_URL: "https://central.sonatype.com/repository/maven-snapshots"
      JRELEASER_GIT_ROOT_SEARCH: true
    outputs:
      version: ${{ steps.publish.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        if: ${{ inputs.git_ref == '' }}
        with:
          fetch-tags: ${{ inputs.version_strategy == 'tag' && 'true' || 'false' }}
          fetch-depth: 0
          
      - name: Checkout code with reference
        uses: actions/checkout@v4
        if: ${{ inputs.git_ref != '' }}
        with:
          ref: ${{ inputs.git_ref }}
          fetch-tags: ${{ inputs.version_strategy == 'tag' && 'true' || 'false' }}
          fetch-depth: 0

      - name: Set up Java ${{ inputs.java_version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java_version }}
          distribution: ${{ inputs.java_distribution }}
          cache: maven

      - id: get-version
        uses: entur/gha-maven-central/.github/actions/get-version@v1
        with:
          version_strategy: ${{ inputs.version_strategy }}
          version_file_name: ${{ inputs.version_file_name }}
          version_tag_prefix: ${{ inputs.version_tag_prefix }}

      - id: increment-version
        uses: entur/gha-maven-central/.github/actions/increment-version@v1
        with:
          previous_version: ${{ steps.get-version.outputs.version }}
          next_version: ${{ inputs.next_version }}

      - id: final-version
        shell: bash
        env: 
          GHA_MAVENCENTRAL_SNAPSHOT: ${{ inputs.snapshot }} 
          GHA_MAVENCENTRAL_CURRENT_VERSION: ${{ steps.get-version.outputs.version }}
          GHA_MAVENCENTRAL_CURRENT_VERSION_MAJOR: ${{ steps.get-version.outputs.version_major }}
          GHA_MAVENCENTRAL_CURRENT_VERSION_MINOR: ${{ steps.get-version.outputs.version_minor }}
          GHA_MAVENCENTRAL_CURRENT_VERSION_PATCH: ${{ steps.get-version.outputs.version_patch }}
          GHA_MAVENCENTRAL_NEXT_VERSION_MAJOR: ${{ steps.increment-version.outputs.version_major }}
          GHA_MAVENCENTRAL_NEXT_VERSION_MINOR: ${{ steps.increment-version.outputs.version_minor }}
          GHA_MAVENCENTRAL_NEXT_VERSION_PATCH: ${{ steps.increment-version.outputs.version_patch }}
        run: |
          major=$GHA_MAVENCENTRAL_NEXT_VERSION_MAJOR
          minor=$GHA_MAVENCENTRAL_NEXT_VERSION_MINOR
          patch=$GHA_MAVENCENTRAL_NEXT_VERSION_PATCH

          # If made a simple 1 digit patch bump, retain current version
          if [[ $GHA_MAVENCENTRAL_CURRENT_VERSION == *-SNAPSHOT ]]; then
            bumped_current_patch=$((GHA_MAVENCENTRAL_CURRENT_VERSION_PATCH+1))
            if [ "$bumped_current_patch" ==  "$patch" ]; then
              if [ "$GHA_MAVENCENTRAL_CURRENT_VERSION_MAJOR" ==  "$major" ] && [ "$GHA_MAVENCENTRAL_CURRENT_VERSION_MINOR" ==  "$minor" ]; then
                patch=$GHA_MAVENCENTRAL_CURRENT_VERSION_PATCH
              fi
            fi
          fi

          if [ "$GHA_MAVENCENTRAL_SNAPSHOT" = "true" ]; then
            echo "VERSION=$major.$minor.$patch-SNAPSHOT" >> $GITHUB_ENV
            echo "version=$major.$minor.$patch-SNAPSHOT" >> $GITHUB_OUTPUT
          else
            echo "VERSION=$major.$minor.$patch" >> $GITHUB_ENV
            echo "version=$major.$minor.$patch" >> $GITHUB_OUTPUT
          fi

          echo "NEXT_VERSION=$major.$minor.$((patch+1))-SNAPSHOT" >> $GITHUB_ENV
          echo "next_version=$major.$minor.$((patch+1))-SNAPSHOT" >> $GITHUB_OUTPUT

      - name: Generate JReleaser Maven Central Config
        shell: bash
        env:
          GHA_MAVENCENTRAL_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GHA_MAVENCENTRAL_SONATYPE_USERNAME: ${{ secrets.SONATYPE_AUTH_USER }}
          GHA_MAVENCENTRAL_SONATYPE_PASSWORD: ${{ secrets.SONATYPE_AUTH_TOKEN }}
          GHA_MAVENCENTRAL_GPG_PUBLIC_KEY: ${{ secrets.SONATYPE_GPG_KEY_PUBLIC }}
          GHA_MAVENCENTRAL_GPG_SECRET_KEY: ${{ secrets.SONATYPE_GPG_KEY }}
          GHA_MAVENCENTRAL_GPG_PASSPHRASE: ${{ secrets.SONATYPE_GPG_KEY_PASSWORD }}

        run: |
          mkdir -p $HOME/.jreleaser
          cat << EOF >>$HOME/.jreleaser/config.toml
          JRELEASER_GITHUB_TOKEN="$GHA_MAVENCENTRAL_GITHUB_TOKEN"
          JRELEASER_NEXUS2_USERNAME="$GHA_MAVENCENTRAL_SONATYPE_USERNAME"
          JRELEASER_NEXUS2_PASSWORD="$GHA_MAVENCENTRAL_SONATYPE_PASSWORD"
          JRELEASER_MAVENCENTRAL_USERNAME="$GHA_MAVENCENTRAL_SONATYPE_USERNAME"
          JRELEASER_MAVENCENTRAL_PASSWORD="$GHA_MAVENCENTRAL_SONATYPE_PASSWORD"
          JRELEASER_GPG_PASSPHRASE="$GHA_MAVENCENTRAL_GPG_PASSPHRASE"
          JRELEASER_GPG_PUBLIC_KEY="""$(echo "$GHA_MAVENCENTRAL_GPG_PUBLIC_KEY" | base64 --decode)"""
          JRELEASER_GPG_SECRET_KEY="""$(echo "$GHA_MAVENCENTRAL_GPG_SECRET_KEY" | base64 --decode)"""
          EOF

      - name: Set version
        shell: bash
        env:
          GHA_MAVENCENTRAL_VERSION: ${{ steps.final-version.outputs.version }}
          GHA_TAG_PREFIX: ${{ inputs.version_tag_prefix }}
        run: |
            mvn -B versions:set -DnewVersion=$GHA_MAVENCENTRAL_VERSION

      - name: Verify JReleaser Config
        shell: bash
        run: |
            # include publication profile in all commands so that modules which
            # are excluded from publishing (i.e. examples) can be disabled
            mvn --non-recursive -B -Ppublication jreleaser:config -Djreleaser.tag.name=${GHA_TAG_PREFIX}${GHA_MAVENCENTRAL_VERSION}

      - name: JReleaser stage
        env:
          GHA_MAVENCENTRAL_VERSION: ${{ steps.final-version.outputs.version }}
          GHA_TAG_PREFIX: ${{ inputs.version_tag_prefix }}
        id: stage
        shell: bash
        run: |
          mvn -B -Ppublication deploy -Djreleaser.tag.name=${GHA_TAG_PREFIX}${GHA_MAVENCENTRAL_VERSION}

      - name: JReleaser release
        id: release
        shell: bash
        env:
          GHA_MAVENCENTRAL_VERSION: ${{ steps.final-version.outputs.version }}
          GHA_TAG_PREFIX: ${{ inputs.version_tag_prefix }}
        run: |
          mvn --non-recursive -B -Ppublication jreleaser:full-release -Djreleaser.tag.name=${GHA_TAG_PREFIX}${GHA_MAVENCENTRAL_VERSION}
          
          echo ":tada: Published $GHA_MAVENCENTRAL_VERSION to Maven Central." >> $GITHUB_STEP_SUMMARY
          echo "version=$GHA_MAVENCENTRAL_VERSION" >> $GITHUB_OUTPUT

      - name: Preare Next Version (${{ steps.final-version.outputs.next_version }})
        uses: entur/gha-maven-central/.github/actions/update-version@v1
        if: ${{ inputs.snapshot == 'false' }}
        with:
          version: ${{ steps.final-version.outputs.next_version }}
          version_file_name: ${{ inputs.version_file_name }}
          push_to_repo: ${{ inputs.push_to_repo }}

      - name: Upload Build Reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: |
            **/target/site
            **/target/reports/
            **/target/surefire-reports
