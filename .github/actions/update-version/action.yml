  name: Update Artifact Version
  description: Update artifact version files and (enabled by default) pushes the changes back to the repo
  inputs:
    version_file_name:
      description: "The name of the file containing the version number to update"
      required: true
    version_variable_name:
      description: "The name of the variable containing the version number to update"
      required: false
      default: "version"
    previous_version:
      description: "The previous (semver) previous_version of the artifact"
      required: true
    next_version:
      description: "The next (semver) version of the artifact. Increments can be automatically detected ('') from the commit message, partially incremented using ('major', 'minor', 'patch'), or be forcefully defined (e.g. '1.3.0')"
      required: false
      default: "" # auto (''), major, minor, patch or a semver version
    next_version_suffix:
      description: "The next version of the artifact's suffix. Usual values would be -snapshot or -prerelease"
      required: false
      default: ""
    push_to_repo:
      description: "Whether to push the new version back to the repo"
      required: false
      default: "true"
  
  outputs:
    version:
      value: ${{ steps.result.outputs.version }}
      description: "The new version of the artifact"

  runs:
    using: "composite"
    steps:
      - name: Set New Version
        id: result
        shell: bash
        env:
          GHA_MAVENCENTRAL_PREVIOUS_VERSION: ${{ inputs.previous_version }}
          GHA_MAVENCENTRAL_NEXT_VERSION: ${{ inputs.next_version }}
          GHA_MAVENCENTRAL_NEXT_VERSION_SUFFIX: ${{ inputs.next_version_suffix }}
        run: |
          # If next version is not defined, automatically increment the patch version,
          # or if defined, the commit message
          if [ $GHA_MAVENCENTRAL_NEXT_VERSION = "" ]; then
            version_increment="patch"
            
            COMMIT_MESSAGE=$(git log --format="%B" -n 1)
            if [[ $COMMIT_MESSAGE =~ \[ ]]; then
              bracket_payloads=$(echo "$COMMIT_MESSAGE" | grep -Po "(?<=\[)[^\]]*(?=\])")
              
              while IFS= read -r BRACKET_PAYLOAD; do
                bracket_payload_trimmed=$(echo "$BRACKET_PAYLOAD" | tr -d '[:blank:]')
                bracket_payload_trimmed_lowercase=$(tr '[:upper:]' '[:lower:]' <<<"$bracket_payload_trimmed" )
                
                # detect type      
                if [ "$bracket_payload_trimmed_lowercase" = "minor" ]; then
                  version_increment="minor"
                elif [ "$bracket_payload_trimmed_lowercase" = "major" ]; then
                  version_increment="major"
                elif [ "$bracket_payload_trimmed_lowercase" = "patch" ]; then
                  version_increment="patch"
                fi

              done <<< "$bracket_payloads"
            fi
          else
            version_increment=$GHA_MAVENCENTRAL_VERSION_INCREMENT
          fi

          major=$(echo "$GHA_MAVENCENTRAL_PREVIOUS_VERSION" | cut -d. -f1)
          minor=$(echo "$GHA_MAVENCENTRAL_PREVIOUS_VERSION" | cut -d. -f2)
          patch=$(echo "$GHA_MAVENCENTRAL_PREVIOUS_VERSION" | cut -d. -f3)

          if [ "$version_increment" = "minor" ]; then
            minor="$((minor + 1))"
            patch="0"
          elif [ "$version_increment" = "major" ]; then
            MAJOR="$((major + 1))"
            minor="0"
            patch="0"
          elif [ "$version_increment" = "patch" ]; then
            patch="$((patch + 1))"
          else 
            semver_regex='^v?(0|[0-9]*)\.(0|0-9]*)\.(0|0-9]*)'
            if [[ "$version_increment" =~ $semver_regex ]]; then
              major=${BASH_REMATCH[1]}
              minor=${BASH_REMATCH[2]}
              patch=${BASH_REMATCH[3]}
            else
              echo "Expected increment to be patch, minor, major or a static version, got $version_increment"
              exit 1
            fi
          fi

          new_version="$major.$minor.$patch$GHA_MAVENCENTRAL_NEXT_VERSION_SUFFIX"
          echo "Next version is $new_version"
          echo "VERSION=$new_version" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Insert New Version Into File
        shell: bash
        env:
          GHA_MAVENCENTRAL_VERSION: ${{ env.version }}
          GHA_MAVENCENTRAL_VERSION_FILE_NAME: ${{ inputs.version_file_name }}
          GHA_MAVENCENTRAL_VERSION_VARIABLE_NAME: ${{ inputs.version_variable_name }}
        run: |
          # Credit where credit is due
          # https://unix.stackexchange.com/a/83481
          function xmlpath()
          {
              local expr="${1//\// }"
              local path=()
              local chunk tag data
              local line=1

              while IFS='' read -r -d '<' chunk; do
                  IFS='>' read -r tag data <<< "$chunk"
                  
                  tag=(${tag[0]})
                  case "$tag" in
                  '?'*) ;;
                  '!â€“-'*) ;;
                  '![CDATA['*) data="${tag:8:${#tag}-10}" ;;
                  ?*'/') ;;
                  '/'?*) line=$(($line - 1)) unset path[${#path[@]}-1] ;;
                  ?*) line=$(($line + 1)) path+=("$tag") ;;
                  esac

                  if [[ "${path[@]}" == "$expr" ]]; then
                      echo "$line $data"
                      break
                  fi
              done
          }

          file_ext=$(echo "$GHA_MAVENCENTRAL_VERSION_FILE_NAME" | awk -F. '{print tolower($NF)}')
          if [[ $file_ext == "properties" ]]; then
            sed -i "s/${GHA_MAVENCENTRAL_VERSION_VARIABLE_NAME}=.*/${GHA_MAVENCENTRAL_VERSION_VARIABLE_NAME}=$VERSION/" ${GHA_MAVENCENTRAL_VERSION_FILE_NAME}
          elif [[ $file_ext == "xml" ]]; then
            if test -f $GHA_MAVENCENTRAL_VERSION_FILE_NAME; then
              output=$(xmlpath "project/$GHA_MAVENCENTRAL_VERSION_VARIABLE_NAME" < $GHA_MAVENCENTRAL_VERSION_FILE_NAME)
              previous_version=${output#* }
              previous_version_line=${output%"$previous_version"}
              tmp_file_name="$GHA_MAVENCENTRAL_VERSION_FILE_NAME.tmp"

              # This should probably be made a bit more safe
              awk -v old="$previous_version" -v new="$VERSION" -v n="$previous_version_line" 'NR==n {sub(old,new)}1' "$GHA_MAVENCENTRAL_VERSION_FILE_NAME" > $tmp_file_name && mv $tmp_file_name "$GHA_MAVENCENTRAL_VERSION_FILE_NAME"
            fi
          else
            echo "Expected a version file to be a gradle .properties or pom .xml file for version replacement"
            exit 1
          fi

          echo "Inserted new version $VERSION into file $GHA_MAVENCENTRAL_VERSION_FILE_NAME"

      - name: Push Version
        if: ${{ inputs.push_to_repo == 'true' }}
        shell: bash
        env:
            GHA_MAVENCENTRAL_GITHUB_REF_NAME: ${{ github.ref }}
            GHA_MAVENCENTRAL_VERSION_FILE_NAME: ${{ inputs.version_file_name }}
            GHA_MAVENCENTRAL_VERSION_VARIABLE_NAME: ${{ inputs.version_variable_name }}
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
          git add "${GHA_MAVENCENTRAL_VERSION_FILE_NAME}"
          git commit -m "chore(bump): ${GHA_MAVENCENTRAL_VERSION_VARIABLE_NAME} to ${VERSION} [skip ci]"
          git push origin "${GHA_MAVENCENTRAL_GITHUB_REF_NAME}" --force