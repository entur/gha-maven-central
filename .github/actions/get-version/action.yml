  name: Get Artifact Version
  description: Get current artifact version from tag or file. Expects semver, e.g., 'version=1.0.2'
  inputs:
    version_strategy:
      description: 'Strategy to use for version extraction. Currently supports "file" or "tag".''
      required: true
      default: 'file'
    # FILE STRATEGY
    version_file_name:
      description: 'The name of the file containing the version number to get'
      required: true
    version_variable_name:
      description: 'The name of the variable containing the version number to get'
      required: false
      default: 'version'
    # TAG STRATEGY
    version_tag_prefix:
      description: 'The prefix of the tag containing the version number'
      required: false
      default: 'v'
  
  outputs:
    version:
      value: ${{ env.VERSION }}
      description: 'The current version of the artifact'

  runs:
    using: "composite"
    steps:
      - name: Verify inputs
        shell: bash
        env:
          GHA_MAVENCENTRAL_VERSION_STRATEGY: ${{ inputs.version_strategy }}
        run: |
          valid_strategies=("file" "tag")
          if [[ ! " ${valid_strategies[@]} " =~ " ${GHA_MAVENCENTRAL_VERSION_STRATEGY} " ]]; then
            echo "Invalid strategy: '${GHA_MAVENCENTRAL_VERSION_STRATEGY}'. Must be one of: ${valid_strategies[*]}"
            exit 1
          fi

      - name: Get Version Number From File
        if: ${{ inputs.version_strategy == 'file' }}
        shell: bash
        env:
          GHA_MAVENCENTRAL_VERSION_FILE_NAME: ${{ inputs.version_file_name }}
          GHA_MAVENCENTRAL_VERSION_VARIABLE_NAME: ${{ inputs.version_variable_name }}
        run: |
          # Credit where credit is due
          # https://unix.stackexchange.com/a/83481
          function xmlpath()
          {
              local expr="${1//\// }"
              local path=()
              local chunk tag data
              local line=1

              while IFS='' read -r -d '<' chunk; do
                  IFS='>' read -r tag data <<< "$chunk"
                  
                  tag=(${tag[0]})
                  case "$tag" in
                  '?'*) ;;
                  '!â€“-'*) ;;
                  '![CDATA['*) data="${tag:8:${#tag}-10}" ;;
                  ?*'/') ;;
                  '/'?*) line=$(($line - 1)) unset path[${#path[@]}-1] ;;
                  ?*) line=$(($line + 1)) path+=("$tag") ;;
                  esac

                  if [[ "${path[@]}" == "$expr" ]]; then
                      echo "$line $data"
                      break
                  fi
              done
          }

          file_ext=$(echo "GHA_MAVENCENTRAL_VERSION_FILE_NAME" | awk -F. '{print tolower($NF)}')
          if [[ $file_ext == "properties" ]]; then
            previous_version=$(cat $GHA_MAVENCENTRAL_VERSION_FILE_NAME | grep "${GHA_MAVENCENTRAL_VERSION_VARIABLE_NAME}" | cut -d'=' -f2)
          elif [[ $file_ext == "xml" ]]; then
            if test -f pom.xml; then
              output=$(xmlpath "project/$GHA_MAVENCENTRAL_VERSION_VARIABLE_NAME" < $GHA_MAVENCENTRAL_VERSION_FILE_NAME)
              previous_version=${output#* }

            fi
          else
            echo "Expected a version file to be a gradle .properties or pom .xml file for version extraction"
            exit 1
          fi

          if [ "$previous_version" = "" ]; then
            echo "Expected a pre-existing version"
            exit 1
          fi

          echo "Previous release version is: $previous_version"
          echo "VERSION=$previous_version" >> $GITHUB_ENV
      
      - name: Get Version Number From Tag
        if: ${{ inputs.version_strategy == 'tag' }}
        shell: bash
        env:
          GHA_MAVENCENTRAL_TAG_PREFIX: ${{ inputs.version_tag_prefix }}
        run: |
          previous_tag=$(git tag -l --sort -version:refname "${GHA_MAVENCENTRAL_TAG_PREFIX}*" | head -n 1)
          if [ "$PREVIOUS_TAG" = "" ]; then
            echo "Expected a pre-existing tag on the form '${GHA_MAVENCENTRAL_TAG_PREFIX}x.y.z' for version extraction"
            exit 1
          fi
          
          rel_len=$(echo ${GHA_MAVENCENTRAL_TAG_PREFIX} | wc -c | xargs)
          previous_version=$(echo $previous_tag | cut -c ${rel_len}-)

          echo "Previous release version tag is: $previous_tag"
          echo "VERSION=$previous_version" >> $GITHUB_ENV