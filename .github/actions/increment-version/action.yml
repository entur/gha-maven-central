name: Increment Artifact Version
description: Increment artifact version files
inputs:
  previous_version:
    description: "The previous (semver) version of the artifact"
    required: true
  next_version:
    description: "The next (semver) version of the artifact. Increments can be noop (''), automatically detected ('auto') from the commit message, partially incremented using ('major', 'minor', 'patch'), or be forcefully defined (e.g. '1.3.0')"
    required: false
    default: "auto" #  noop (''), auto, major, minor, patch or a semver version

outputs:
  version:
    value: ${{ steps.result.outputs.version }}
    description: "The new version of the artifact"
  version_major:
    value: ${{ steps.result.outputs.version_major }}
    description: "The new major version of the artifact"
  version_minor:
    value: ${{ steps.result.outputs.version_minor }}
    description: "The new minor version of the artifact"
  version_patch:
    value: ${{ steps.result.outputs.version_patch }}
    description: "The new patch version of the artifact"

runs:
  using: "composite"
  steps:
    - name: Increment Version
      id: result
      shell: bash
      env:
        GHA_MAVENCENTRAL_PREVIOUS_VERSION: ${{ inputs.previous_version }}
        GHA_MAVENCENTRAL_NEXT_VERSION: ${{ inputs.next_version }}
      run: |
        new_version="$GHA_MAVENCENTRAL_PREVIOUS_VERSION"

        # Keep suffix if one is defined
        content="$(echo "$new_version" | cut -d- -f1)"
        suffix="$(echo "$new_version" | cut -d- -f2)"
        if [ "$content" = "$suffix" ]; then
          suffix=""
        else
          suffix="-$suffix"
        fi

        major="$(echo "$content" | cut -d. -f1)"
        major=${major:-0}
        minor=$(echo "$content" | cut -d. -f2)
        minor=${minor:-0}
        patch=$(echo "$content" | cut -d. -f3)
        patch=${patch:-0}

        # If next version is not defined, automatically increment the patch version,
        # or if defined, the commit message
        if [ "$GHA_MAVENCENTRAL_NEXT_VERSION" != "" ]; then
          if [ "$GHA_MAVENCENTRAL_NEXT_VERSION" = "auto" ]; then
            version_increment="patch"
            commit_message=$(git log --format="%B" -n 1)
            
            if [[ $commit_message =~ \[ ]]; then
              bracket_payloads=$(echo "$commit_message" | grep -Po "(?<=\[)[^\]]*(?=\])")
              
              while IFS= read -r BRACKET_PAYLOAD; do
                bracket_payload_trimmed=$(echo "$BRACKET_PAYLOAD" | tr -d '[:blank:]')
                bracket_payload_trimmed_lowercase=$(tr '[:upper:]' '[:lower:]' <<<"$bracket_payload_trimmed" )
                
                # detect type      
                if [ "$bracket_payload_trimmed_lowercase" = "minor" ]; then
                  version_increment="minor"
                elif [ "$bracket_payload_trimmed_lowercase" = "major" ]; then
                  version_increment="major"
                elif [ "$bracket_payload_trimmed_lowercase" = "patch" ]; then
                  version_increment="patch"
                fi

              done <<< "$bracket_payloads"
            fi
          else
            version_increment=$(echo $GHA_MAVENCENTRAL_NEXT_VERSION | xargs)
          fi

          if [ "$version_increment" = "minor" ]; then
            minor="$((minor + 1))"
            patch="0"
          elif [ "$version_increment" = "major" ]; then
            major="$((major + 1))"
            minor="0"
            patch="0"
          elif [ "$version_increment" = "patch" ]; then
            patch="$((patch + 1))"
          else 
            semver_regex='^v?(0|[0-9]*)\.(0|[0-9]*)\.(0|[0-9]*$)'
            if [[ "$version_increment" =~ $semver_regex ]]; then
              major=${BASH_REMATCH[1]}
              minor=${BASH_REMATCH[2]}
              patch=${BASH_REMATCH[3]}
            else
              echo "Expected increment to be 'patch', 'minor', 'major' or a static version e.g. '1.0.0', got $version_increment"
              exit 1
            fi
          fi

          new_version="$major.$minor.$patch$suffix"
        fi
        
        echo "Incremented version is $new_version"
        echo "VERSION=$new_version" >> $GITHUB_ENV
        echo "version=$new_version" >> $GITHUB_OUTPUT

        echo "VERSION_MAJOR=$major" >> $GITHUB_ENV
        echo "version_major=$major" >> $GITHUB_OUTPUT
        echo "VERSION_MINOR=$minor" >> $GITHUB_ENV
        echo "version_minor=$minor" >> $GITHUB_OUTPUT
        echo "VERSION_PATCH=$patch" >> $GITHUB_ENV
        echo "version_patch=$patch" >> $GITHUB_OUTPUT