  name: Increment Artifact Version
  description: Increment the artifact version according to semver rules'
  inputs:
    previous_version:
      description: 'The previous (semver) previous_version of the artifact'
      required: true
    next_version:
      description: "The next (semver) version of the artifact. Increments can be automatically detected ('') from the commit message, partially incremented using ('major', 'minor', 'patch'), or statically (e.g. '1.3.0')"
      default: '' # auto (''), major, minor, patch or a semver version
      required: false
  
  outputs:
    version:
      value: ${{ env.VERSION }}
      description: 'The incremented version of the artifact'

  runs:
    using: "composite"
    steps:      
      - name: Set next version
        shell: bash
        env:
          GHA_MAVENCENTRAL_PREVIOUS_VERSION: ${{ inputs.previous_version }}
          GHA_MAVENCENTRAL_NEXT_VERSION: ${{ inputs.next_version }}
        run: |
          # If next version is not defined, automatically increment the patch version,
          # or if defined, the commit message
          if [ $GHA_MAVENCENTRAL_NEXT_VERSION = "" ]; then
            version_increment="patch"
            
            COMMIT_MESSAGE=$(git log --format="%B" -n 1)
            if [[ $COMMIT_MESSAGE =~ \[ ]]; then
              bracket_payloads=$(echo "$COMMIT_MESSAGE" | grep -Po "(?<=\[)[^\]]*(?=\])")
              
              while IFS= read -r BRACKET_PAYLOAD; do
                bracket_payload_trimmed=$(echo "$BRACKET_PAYLOAD" | tr -d '[:blank:]')
                bracket_payload_trimmed_lowercase=$(tr '[:upper:]' '[:lower:]' <<<"$bracket_payload_trimmed" )
                
                # detect type      
                if [ "$bracket_payload_trimmed_lowercase" = "minor" ]; then
                  version_increment="minor"
                elif [ "$bracket_payload_trimmed_lowercase" = "major" ]; then
                  version_increment="major"
                elif [ "$bracket_payload_trimmed_lowercase" = "patch" ]; then
                  version_increment="patch"
                fi

              done <<< "$bracket_payloads"
            fi
          else
            version_increment=$GHA_MAVENCENTRAL_VERSION_INCREMENT
          fi

          major=$(echo "$GHA_MAVENCENTRAL_PREVIOUS_VERSION" | cut -d. -f1)
          minor=$(echo "$GHA_MAVENCENTRAL_PREVIOUS_VERSION" | cut -d. -f2)
          patch=$(echo "$GHA_MAVENCENTRAL_PREVIOUS_VERSION" | cut -d. -f3)

          if [ "$version_increment" = "minor" ]; then
            minor="$((minor + 1))"
            patch="0"
          elif [ "$version_increment" = "major" ]; then
            MAJOR="$((major + 1))"
            minor="0"
            patch="0"
          elif [ "$version_increment" = "patch" ]; then
            patch="$((patch + 1))"
          else 
            semver_regex='^v?(0|[0-9]*)\.(0|0-9]*)\.(0|0-9]*)'
            if [[ "$version_increment" =~ $semver_regex ]]; then
              major=${BASH_REMATCH[1]}
              minor=${BASH_REMATCH[2]}
              patch=${BASH_REMATCH[3]}
            else
              echo "Expected increment to be patch, minor, major or a static version, got $version_increment"
              exit 1
            fi
          fi

          new_version="$major.$minor.$patch"
          echo "Next release is $new_version"

          echo "VERSION=$new_version" >> $GITHUB_ENV